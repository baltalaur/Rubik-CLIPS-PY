(deffacts fapte-initiale
	(has front b y y y g o g g g)
	(has up o y r o y r r g o)
	(has down w w w w w w w w w)
	(has right g b g g o y o o o)
	(has left y b y g r b r r r)
	(has back b b b r b r y o b)	
)
(defrule white_cross_moves
	(not (white-cross completed))
	(has front ?f1 ?f2 ?f3 ?f4 ?f5 ?f6 ?f7 ?f8 ?f9)
	(has right ?r1 ?r2 ?r3 ?r4 ?r5 ?r6 ?r7 ?r8 ?r9)
	(has left ?l1 ?l2 ?l3 ?l4 ?l5 ?l6 ?l7 ?l8 ?l9)
	(has back ?b1 ?b2 ?b3 ?b4 ?b5 ?b6 ?b7 ?b8 ?b9)
	(has down ?d1 ?d2 ?d3 ?d4 ?d5 ?d6 ?d7 ?d8 ?d9)
	(test 
		(and 
			(eq ?d2 ?d4 ?d5 ?d6 ?d8)
			(eq ?f8 ?f5)(eq ?r8 ?r5)(eq ?l8 ?l5)(eq ?b2 ?b5)
		)
	)
	=>
	(assert (white-cross completed))
	(printout t "A fost rezolvata crucea alba" crlf)
)

(defrule white_corners_moves
	(white-cross completed)
	(not (white-corners completed))
	(has front ?f1 ?f2 ?f3 ?f4 ?f5 ?f6 ?f7 ?f8 ?f9)
	(has right ?r1 ?r2 ?r3 ?r4 ?r5 ?r6 ?r7 ?r8 ?r9)
	(has left ?l1 ?l2 ?l3 ?l4 ?l5 ?l6 ?l7 ?l8 ?l9)
	(has back ?b1 ?b2 ?b3 ?b4 ?b5 ?b6 ?b7 ?b8 ?b9)
	(has down ?d1 ?d2 ?d3 ?d4 ?d5 ?d6 ?d7 ?d8 ?d9)
	(test 
		(and 
			(eq ?d1 ?d2 ?d3 ?d4 ?d5 ?d6 ?d7 ?d8 ?d9)
			(eq ?f7 ?f8 ?f9 ?f5)(eq ?r7 ?r8 ?r9 ?r5)(eq ?l7 ?l8 ?l9 ?l5)(eq ?b1 ?b2 ?b3 ?b5)
		)
	)
	=>
	(assert (white-corners completed))
	(printout t "A fost rezolvat primul nivel" crlf)
)

(defrule green_second_layer_moves
	(white-corners completed)
	(not (second-layer completed))
	(has front ?f1 ?f2 ?f3 ?f4 ?f5 ?f6 ?f7 ?f8 ?f9)
	(has right ?r1 ?r2 ?r3 ?r4 ?r5 ?r6 ?r7 ?r8 ?r9)
	(has left ?l1 ?l2 ?l3 ?l4 ?l5 ?l6 ?l7 ?l8 ?l9)
	(has back ?b1 ?b2 ?b3 ?b4 ?b5 ?b6 ?b7 ?b8 ?b9)
	(has up ?u1 ?u2 ?u3 ?u4 ?u5 ?u6 ?u7 ?u8 ?u9)
	(test (or (neq ?f4 g) (neq ?f6 g)))
	=>
	;VERIFICARI FATA VERDE
	(if (or
			(and (eq ?l2 g)(eq ?u4 o))
			(and (eq ?r4 g)(eq ?f6 o))
		) then (assert (moves R U' R' U' F' U F))(printout t "Trebuie realizate urmatoarele miscari R U' R' U' F' U F" crlf))
	(if (or
			(and (eq ?r2 g)(eq ?u6 r))
			(and (eq ?l6 g)(eq ?f4 r))
		) then (assert (moves L' U L U F U' F'))(printout t "Trebuie realizate urmatoarele miscari L' U L U F U' F'" crlf))
	(if (eq ?f2 g) then
		(if (eq ?u8 o) then (assert (moves U))(printout t "Trebuie realizata miscarea U" crlf))
		(if (eq ?u8 r) then (assert (moves U'))(printout t "Trebuie realizata miscarea U'" crlf))
	)
	(if (eq ?b8 g) then 
		(if (eq ?u2 o) then (assert (moves U'))(printout t "Trebuie realizata miscarea U'" crlf))
		(if (eq ?u2 r) then (assert (moves U))(printout t "Trebuie realizata miscarea U" crlf))
	)
)

(defrule orange_second_layer_moves
	(white-corners completed)
	(not (second-layer completed))
	(has front ?f1 ?f2 ?f3 ?f4 ?f5 ?f6 ?f7 ?f8 ?f9)
	(has right ?r1 ?r2 ?r3 ?r4 ?r5 ?r6 ?r7 ?r8 ?r9)
	(has left ?l1 ?l2 ?l3 ?l4 ?l5 ?l6 ?l7 ?l8 ?l9)
	(has back ?b1 ?b2 ?b3 ?b4 ?b5 ?b6 ?b7 ?b8 ?b9)
	(has up ?u1 ?u2 ?u3 ?u4 ?u5 ?u6 ?u7 ?u8 ?u9)
	(test (or (neq ?r4 o) (neq ?r6 o)))
	=>
	;VERIFICARI FATA PORTOCALIE
	(if (or
			(and (eq ?f2 o)(eq ?u8 b))
			(and (eq ?r6 o)(eq ?b4 b))
		) then (assert (moves B U' B' U' R' U R))(printout t "Trebuie realizate urmatoarele miscari B U' B' U' R' U R" crlf))
	(if (or
			(and (eq ?b8 o)(eq ?u2 g)) 
			(and (eq ?f6 o)(eq ?r4 g)) 
		)then (assert (moves F' U F U R U' R'))(printout t "Trebuie realizate urmatoarele miscari F' U F U R U' R'" crlf))
	(if (eq ?r2 o) then
		(if (eq ?u6 b) then (assert (moves U))(printout t "Trebuie realizata miscarea U" crlf))
		(if (eq ?u6 g) then (assert (moves U'))(printout t "Trebuie realizata miscarea U'" crlf))
	)
	(if (eq ?l2 o) then 
		(if (eq ?u4 b) then (assert (moves U'))(printout t "Trebuie realizata miscarea U'" crlf))
		(if (eq ?u4 g) then (assert (moves U))(printout t "Trebuie realizata miscarea U" crlf))
	)
)

(defrule red_second_layer_moves
	(white-corners completed)
	(not (second-layer completed))
	(has front ?f1 ?f2 ?f3 ?f4 ?f5 ?f6 ?f7 ?f8 ?f9)
	(has right ?r1 ?r2 ?r3 ?r4 ?r5 ?r6 ?r7 ?r8 ?r9)
	(has left ?l1 ?l2 ?l3 ?l4 ?l5 ?l6 ?l7 ?l8 ?l9)
	(has back ?b1 ?b2 ?b3 ?b4 ?b5 ?b6 ?b7 ?b8 ?b9)
	(has up ?u1 ?u2 ?u3 ?u4 ?u5 ?u6 ?u7 ?u8 ?u9)
	(test (or (neq ?l4 r) (neq ?l6 r)))
	=>
	;VERIFICARI FATA ROSIE
	(if (or
			(and (eq ?b8 r)(eq ?u2 g))
			(and (eq ?f4 r)(eq ?l6 g))
		) then (assert (moves F U' F' U' L' U L))(printout t "Trebuie realizate urmatoarele miscari F U' F' U' L' U L" crlf))
	(if (or 
			(and (eq ?f2 r)(eq ?u8 b))
			(and (eq ?b6 r)(eq ?l4 b))
		) then (assert (moves B' U B U L U' L'))(printout t "Trebuie realizate urmatoarele miscari B' U B U L U' L'" crlf))
	(if (eq ?r2 r) then
		(if (eq ?u6 b) then (assert (moves U))(printout t "Trebuie realizata miscarea U" crlf))
		(if (eq ?u6 g) then (assert (moves U'))(printout t "Trebuie realizata miscarea U'" crlf))
	)
	(if (eq ?l2 r) then 
		(if (eq ?u4 b) then (assert (moves U'))(printout t "Trebuie realizata miscarea U'" crlf))
		(if (eq ?u4 g) then (assert (moves U))(printout t "Trebuie realizata miscarea U" crlf))
	)
)

(defrule blue_second_layer_moves
	(white-corners completed)
	(not (second-layer completed))
	(has front ?f1 ?f2 ?f3 ?f4 ?f5 ?f6 ?f7 ?f8 ?f9)
	(has right ?r1 ?r2 ?r3 ?r4 ?r5 ?r6 ?r7 ?r8 ?r9)
	(has left ?l1 ?l2 ?l3 ?l4 ?l5 ?l6 ?l7 ?l8 ?l9)
	(has back ?b1 ?b2 ?b3 ?b4 ?b5 ?b6 ?b7 ?b8 ?b9)
	(has up ?u1 ?u2 ?u3 ?u4 ?u5 ?u6 ?u7 ?u8 ?u9)
	(test (or (neq ?b4 b) (neq ?b6 b)))
	=>
	;VERIFICARI FATA ALBASTRA
	(if (or 
			(and (eq ?l2 b)(eq ?u4 o))
			(and (eq ?r6 b)(eq ?b4 o))
		) then (assert (moves R' U R U B U' B))(printout t "Trebuie realizate urmatoarele miscari R' U R U B U' B" crlf))
	(if (or
			(and (eq ?r2 b)(eq ?u6 r))
			(and (eq ?l4 b)(eq ?b6 r))
		) then (assert (moves L U' L' U' B' U B))(printout t "Trebuie realizate urmatoarele miscari L U' L' U' B' U B" crlf))
	(if (eq ?f2 b) then
		(if (eq ?u8 o) then (assert (moves U))(printout t "Trebuie realizata miscarea U" crlf))
		(if (eq ?u8 r) then (assert (moves U'))(printout t "Trebuie realizata miscarea U'" crlf))
	)
	(if (eq ?b8 b) then 
		(if (eq ?u2 o) then (assert (moves U'))(printout t "Trebuie realizata miscarea U'" crlf))
		(if (eq ?u2 r) then (assert (moves U))(printout t "Trebuie realizata miscarea U" crlf))
	)
)

(defrule second_layer_check (declare (salience 30))
	(white-corners completed)
	(not (second-layer completed))
	(has front ?f1 ?f2 ?f3 ?f4 ?f5 ?f6 ?f7 ?f8 ?f9)
	(has right ?r1 ?r2 ?r3 ?r4 ?r5 ?r6 ?r7 ?r8 ?r9)
	(has left ?l1 ?l2 ?l3 ?l4 ?l5 ?l6 ?l7 ?l8 ?l9)
	(has back ?b1 ?b2 ?b3 ?b4 ?b5 ?b6 ?b7 ?b8 ?b9)
	(test (and
		(eq ?f4 ?f5 ?f6 ?f7 ?f8 ?f9 g)
		(eq ?r4 ?r5 ?r6 ?r7 ?r8 ?r9 o)
		(eq ?l4 ?l5 ?l6 ?l7 ?l8 ?l9 r)
		(eq ?b1 ?b2 ?b3 ?b4 ?b5 ?b6 b)
		)
	)
	=>
	(assert (second-layer completed))
	(printout t "A fost rezolvat al doilea nivel" crlf)
)

(defrule yellow_cross_moves
	(second-layer completed)
	(not (yellow-cross completed))
	(has up ?u1 ?u2 ?u3 ?u4 ?u5 ?u6 ?u7 ?u8 ?u9)
	=>
	(if (eq ?u2 ?u4 ?u5 ?u6 ?u8 y) then (assert (yellow-cross completed))(printout t "A fost rezolvata crucea galbena" crlf)
		else
		(if 
			(or 
				(and (eq ?u2 ?u8 y) (neq ?u4 y) (neq ?u6 y))
				(and (eq ?u2 ?u6 y) (neq ?u8 y) (neq ?u4 y))
			) then (assert (moves U))(printout t "Trebuie realizata miscarea U" crlf)
			else
			(if 
				(or 
					(and (eq ?u4 ?u6 y) (neq ?u2 y) (neq ?u8 y))
					(and (eq ?u2 ?u4 y) (neq ?u8 y) (neq ?u6 y))
					(and (eq ?u8 ?u6 y) (neq ?u2 y) (neq ?u4 y))
					(and (neq ?u2 y) (neq ?u4 y) (neq ?u6 y) (neq ?u8 y))
				) then (assert (moves F R U R' U' F'))(printout t "Trebuie realizate urmatoarele miscari F R U R' U' F'" crlf)
			)
		)
	)	
)

(defrule yellow_edge_moves
	(yellow-cross completed)
	(not (yellow-edge completed))
	(has front ?f1 ?f2 ?f3 ?f4 ?f5 ?f6 ?f7 ?f8 ?f9)
	(has right ?r1 ?r2 ?r3 ?r4 ?r5 ?r6 ?r7 ?r8 ?r9)
	(has left ?l1 ?l2 ?l3 ?l4 ?l5 ?l6 ?l7 ?l8 ?l9)
	(has back ?b1 ?b2 ?b3 ?b4 ?b5 ?b6 ?b7 ?b8 ?b9)
	(has up ?u1 ?u2 ?u3 ?u4 ?u5 ?u6 ?u7 ?u8 ?u9)
	=>
	(if (and (eq ?u2 ?u4 ?u5 ?u6 ?u8 y)(eq ?f2 g)(eq ?l2 r)(eq ?r2 o)(eq ?b8 b)) then (assert (yellow-edge completed))(printout t "Au fost rezolvate marginile galbene" crlf))
	(if (and (eq ?l2 b) (eq ?b8 r)) then (assert (moves F U F' U F U U F' U))(printout t "Trebuie realizate urmatoarele miscari F U F' U F U U F' U" crlf))
	(if (and (eq ?r2 g) (eq ?f2 o)) then (assert (moves B U B' U B U U B' U))(printout t "Trebuie realizate urmatoarele miscari B U B' U B U U B' U" crlf))
	(if (and (eq ?r2 g) (eq ?f2 r)) then (assert (moves R U R' U R U U R' U))(printout t "Trebuie realizate urmatoarele miscari R U R' U R U U R' U" crlf))
	(if (and (eq ?b8 o) (eq ?r2 b)) then (assert (moves L U L' U L U U L' U))(printout t "Trebuie realizate urmatoarele miscari L U L' U L U U L' U" crlf))
	(if (and (eq ?b8 g) (eq ?f2 b)) then (assert (moves L U L' U L U U L' U U))(printout t "Trebuie realizate urmatoarele miscari L U L' U L U U L' U U" crlf))
	(if (and (eq ?l2 o) (eq ?r2 r)) then (assert (moves L U L' U L U U L'))(printout t "Trebuie realizate urmatoarele miscari L U L' U L U U L'" crlf))
	(if (or 
			(and (eq ?f2 ?f5)(neq ?l2 ?l5)(neq ?r2 ?r5)(neq ?b8 ?b5))
			(and (neq ?f2 ?f5)(eq ?l2 ?l5)(neq ?r2 ?r5)(neq ?b8 ?b5))
			(and (neq ?f2 ?f5)(neq ?l2 ?l5)(eq ?r2 ?r5)(neq ?b8 ?b5))
			(and (neq ?f2 ?f5)(neq ?l2 ?l5)(neq ?r2 ?r5)(eq ?b8 ?b5))
			(and (neq ?f2 ?f5)(neq ?l2 ?l5)(neq ?r2 ?r5)(neq ?b8 ?b5))		
		) then (assert (moves U))(printout t "Trebuie realizata miscarea U" crlf)
	)
)

(defrule yellow_corners_moves
	(yellow-edge completed)
	(not (yellow-corners completed))
	(has front ?f1 ?f2 ?f3 ?f4 ?f5 ?f6 ?f7 ?f8 ?f9)
	(has right ?r1 ?r2 ?r3 ?r4 ?r5 ?r6 ?r7 ?r8 ?r9)
	(has left ?l1 ?l2 ?l3 ?l4 ?l5 ?l6 ?l7 ?l8 ?l9)
	(has back ?b1 ?b2 ?b3 ?b4 ?b5 ?b6 ?b7 ?b8 ?b9)
	(has up ?u1 ?u2 ?u3 ?u4 ?u5 ?u6 ?u7 ?u8 ?u9)
	=>
	(if (and 
			(or 
				(and (eq ?u7 y)(eq ?l3 r)(eq ?f1 g))
				(and (eq ?u7 y)(eq ?l3 g)(eq ?f1 r))
				(and (eq ?u7 r)(eq ?l3 g)(eq ?f1 y))
				(and (eq ?u7 r)(eq ?l3 y)(eq ?f1 g))
				(and (eq ?u7 g)(eq ?l3 y)(eq ?f1 r))
				(and (eq ?u7 g)(eq ?l3 r)(eq ?f1 y))
			)
			(or 
				(and (eq ?u9 y)(eq ?r1 o)(eq ?f3 g))
				(and (eq ?u9 y)(eq ?r1 g)(eq ?f3 o))
				(and (eq ?u9 o)(eq ?r1 g)(eq ?f3 y))
				(and (eq ?u9 o)(eq ?r1 y)(eq ?f3 g))
				(and (eq ?u9 g)(eq ?r1 y)(eq ?f3 o))
				(and (eq ?u9 g)(eq ?r1 o)(eq ?f3 y))
			)
			(or 
				(and (eq ?u1 y)(eq ?l1 r)(eq ?b9 b))
				(and (eq ?u1 y)(eq ?l1 b)(eq ?b9 r))
				(and (eq ?u1 r)(eq ?l1 b)(eq ?b9 y))
				(and (eq ?u1 r)(eq ?l1 y)(eq ?b9 b))
				(and (eq ?u1 b)(eq ?l1 y)(eq ?b9 r))
				(and (eq ?u1 b)(eq ?l1 r)(eq ?b9 y))
			)
			(or 
				(and (eq ?u3 y)(eq ?r3 o)(eq ?b7 b))
				(and (eq ?u3 y)(eq ?r3 b)(eq ?b7 o))
				(and (eq ?u3 o)(eq ?r3 b)(eq ?b7 y))
				(and (eq ?u3 o)(eq ?r3 y)(eq ?b7 b))
				(and (eq ?u3 b)(eq ?r3 y)(eq ?b7 o))
				(and (eq ?u3 b)(eq ?r3 o)(eq ?b7 y))
			)
		) then (assert (yellow-corners completed))(printout t "Au fost rezolvate colturile galbene" crlf)
		else
		(if (or 
				(and (eq ?u7 y)(eq ?l3 r)(eq ?f1 g))
				(and (eq ?u7 y)(eq ?l3 g)(eq ?f1 r))
				(and (eq ?u7 r)(eq ?l3 g)(eq ?f1 y))
				(and (eq ?u7 r)(eq ?l3 y)(eq ?f1 g))
				(and (eq ?u7 g)(eq ?l3 y)(eq ?f1 r))
				(and (eq ?u7 g)(eq ?l3 r)(eq ?f1 y))
			) then (assert (moves U F U' B' U F' U' B))(printout t "Trebuie realizate urmatoarele miscari U F U' B' U F' U' B" crlf)
			else 
			(if (or 
					(and (eq ?u9 y)(eq ?r1 o)(eq ?f3 g))
					(and (eq ?u9 y)(eq ?r1 g)(eq ?f3 o))
					(and (eq ?u9 o)(eq ?r1 g)(eq ?f3 y))
					(and (eq ?u9 o)(eq ?r1 y)(eq ?f3 g))
					(and (eq ?u9 g)(eq ?r1 y)(eq ?f3 o))
					(and (eq ?u9 g)(eq ?r1 o)(eq ?f3 y))
				) then (assert (moves U R U' L' U R' U' L))(printout t "Trebuie realizate urmatoarele miscari U R U' L' U R' U' L" crlf)
				else 
				(if (or 
						(and (eq ?u1 y)(eq ?l1 r)(eq ?b9 b))
						(and (eq ?u1 y)(eq ?l1 b)(eq ?b9 r))
						(and (eq ?u1 r)(eq ?l1 b)(eq ?b9 y))
						(and (eq ?u1 r)(eq ?l1 y)(eq ?b9 b))
						(and (eq ?u1 b)(eq ?l1 y)(eq ?b9 r))
						(and (eq ?u1 b)(eq ?l1 r)(eq ?b9 y))
					) then (assert (moves U L U' R' U L' U' R))(printout t "Trebuie realizate urmatoarele miscari U L U' R' U L' U' R" crlf)
					
					else 
					(if (or 
							(and (eq ?u3 y)(eq ?r3 o)(eq ?b7 b))
							(and (eq ?u3 y)(eq ?r3 b)(eq ?b7 o))
							(and (eq ?u3 o)(eq ?r3 b)(eq ?b7 y))
							(and (eq ?u3 o)(eq ?r3 y)(eq ?b7 b))
							(and (eq ?u3 b)(eq ?r3 y)(eq ?b7 o))
							(and (eq ?u3 b)(eq ?r3 o)(eq ?b7 y))
						) then (assert (moves U B U' F' U B' U' F))(printout t "Trebuie realizate urmatoarele miscari U B U' F' U B' U' F" crlf)
					
					else (assert (moves U R U' L' U R' U' L))(printout t "Trebuie realizate urmatoarele miscari U R U' L' U R' U' L" crlf)
					)
				)	
			)
		)
	)
)

(defrule orrient_yellow_corners_moves
	(yellow-corners completed)
	(not (orrient-yellow-corners completed))
	(has front ?f1 ?f2 ?f3 ?f4 ?f5 ?f6 ?f7 ?f8 ?f9)
	(has right ?r1 ?r2 ?r3 ?r4 ?r5 ?r6 ?r7 ?r8 ?r9)
	(has up ?u1 ?u2 ?u3 ?u4 ?u5 ?u6 ?u7 ?u8 ?u9)
	=>
	(if (eq ?u1 ?u3 ?u7 ?u9 y) then (assert (orrient-yellow-corners completed))(printout t "Au fost orientate colturile galbene" crlf))
	(if (eq ?u9 y) then (assert (moves U))(printout t "Trebuie realizata miscarea U" crlf)
		else (assert (moves R' D' R D))(printout t "Trebuie realizate urmatoarele miscari R' D' R D" crlf)
	)
	
)

(defrule complete_cube_moves
	(orrient-yellow-corners completed)
	(not (cube completed))
	(has front ?f1 ?f2 ?f3 ?f4 ?f5 ?f6 ?f7 ?f8 ?f9)
	(has right ?r1 ?r2 ?r3 ?r4 ?r5 ?r6 ?r7 ?r8 ?r9)
	(has left ?l1 ?l2 ?l3 ?l4 ?l5 ?l6 ?l7 ?l8 ?l9)
	(has back ?b1 ?b2 ?b3 ?b4 ?b5 ?b6 ?b7 ?b8 ?b9)
	(has up ?u1 ?u2 ?u3 ?u4 ?u5 ?u6 ?u7 ?u8 ?u9)
	=>
	(if (and (eq ?u1 ?u3 ?u7 ?u9 y)(eq ?f1 ?f3 g)(eq ?l1 ?l2 r)(eq ?r1 ?r3 o)(eq ?b7 ?b9 b))
		then (assert (cube completed))(printout t "Cubul rubik a fost rezolvat!" crlf)
		else (assert (moves U))(printout t "Trebuie realizata miscarea U" crlf)
	)
)

 (defrule miscare_R (declare (salience 50))
	?adr1 <- (moves R $?miscari)
	?adr2 <- (has down ?x1 ?x2 ?down1 ?x3 ?x4 ?down2 ?x5 ?x6 ?down3)
	?adr3 <- (has front ?y1 ?y2 ?front1 ?y3 ?y4 ?front2 ?y5 ?y6 ?front3)
	?adr4 <- (has up ?z1 ?z2 ?up1 ?z3 ?z4 ?up2 ?z5 ?z6 ?up3)
	?adr5 <- (has back ?back1 ?w1 ?w2 ?back2 ?w3 ?w4 ?back3 ?w5 ?w6)
	?adr6 <- (has right ?r1 ?r2 ?r3 ?r4 ?r5 ?r6 ?r7 ?r8 ?r9)
	=>
	(retract ?adr1)
	(retract ?adr2)
	(retract ?adr3)
	(retract ?adr4)
	(retract ?adr5)
	(retract ?adr6)
	(assert (moves $?miscari))
	(assert (has down ?x1 ?x2 ?back1 ?x3 ?x4 ?back2 ?x5 ?x6 ?back3))
	(assert (has front ?y1 ?y2 ?down1 ?y3 ?y4 ?down2 ?y5 ?y6 ?down3))
	(assert (has up ?z1 ?z2 ?front1 ?z3 ?z4 ?front2 ?z5 ?z6 ?front3))
	(assert (has back ?up1 ?w1 ?w2 ?up2 ?w3 ?w4 ?up3 ?w5 ?w6))
	(assert (has right ?r7 ?r4 ?r1 ?r8 ?r5 ?r2 ?r9 ?r6 ?r3))	
 )
 
 (defrule miscare_L (declare (salience 50))
	?adr1 <- (moves L $?miscari)
	?adr2 <- (has down ?down1 ?x1 ?x2 ?down2 ?x3 ?x4 ?down3 ?x5 ?x6)
	?adr3 <- (has front ?front1 ?y1 ?y2 ?front2 ?y3 ?y4 ?front3 ?y5 ?y6)
	?adr4 <- (has up ?up1 ?z1 ?z2 ?up2 ?z3 ?z4 ?up3 ?z5 ?z6)
	?adr5 <- (has back  ?w1 ?w2 ?back1 ?w3 ?w4 ?back2 ?w5 ?w6 ?back3)
	?adr6 <- (has left ?l1 ?l2 ?l3 ?l4 ?l5 ?l6 ?l7 ?l8 ?l9)
	=>
	(retract ?adr1)
	(retract ?adr2)
	(retract ?adr3)
	(retract ?adr4)
	(retract ?adr5)
	(retract ?adr6)
	(assert (moves $?miscari))
	(assert (has down ?front1 ?x1 ?x2 ?front2 ?x3 ?x4 ?front3 ?x5 ?x6))
	(assert (has front ?up1 ?y1 ?y2 ?up2 ?y3 ?y4 ?up3 ?y5 ?y6))
	(assert (has up ?back1 ?z1 ?z2 ?back2 ?z3 ?z4 ?back3 ?z5 ?z6))
	(assert (has back  ?w1 ?w2 ?down1 ?w3 ?w4 ?down2 ?w5 ?w6 ?down3))
	(assert (has left ?l7 ?l4 ?l1 ?l8 ?l5 ?l2 ?l9 ?l6 ?l3))	
 )
 
 (defrule miscare_U (declare (salience 50))
	?adr1 <- (moves U $?miscari)
	?adr2 <- (has right ?right1 ?right2 ?right3 ?x1 ?x2 ?x3 ?x4 ?x5 ?x6)
	?adr3 <- (has front ?front1 ?front2 ?front3 ?y1 ?y2 ?y3 ?y4 ?y5 ?y6)
	?adr4 <- (has back ?w1 ?w2 ?w3 ?w4 ?w5 ?w6 ?back1 ?back2 ?back3 )
	?adr5 <- (has left ?left1 ?left2 ?left3 ?z1 ?z2 ?z3 ?z4 ?z5 ?z6)
	?adr6 <- (has up ?u1 ?u2 ?u3 ?u4 ?u5 ?u6 ?u7 ?u8 ?u9)
	=>
	(retract ?adr1)
	(retract ?adr2)
	(retract ?adr3)
	(retract ?adr4)
	(retract ?adr5)
	(retract ?adr6)
	(assert (moves $?miscari))
	(assert (has right ?back1 ?back2 ?back3 ?x1 ?x2 ?x3 ?x4 ?x5 ?x6))
	(assert (has front ?right1 ?right2 ?right3 ?y1 ?y2 ?y3 ?y4 ?y5 ?y6))
	(assert (has back ?w1 ?w2 ?w3 ?w4 ?w5 ?w6 ?left1 ?left2 ?left3))
	(assert (has left ?front1 ?front2 ?front3 ?z1 ?z2 ?z3 ?z4 ?z5 ?z6))
	(assert (has up ?u7 ?u4 ?u1 ?u8 ?u5 ?u2 ?u9 ?u6 ?u3))
 )
 
 
 (defrule miscare_D (declare (salience 50))
	?adr1 <- (moves D $?miscari)
	?adr2 <- (has right ?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?right1 ?right2 ?right3 )
	?adr3 <- (has front  ?y1 ?y2 ?y3 ?y4 ?y5 ?y6 ?front1 ?front2 ?front3)
	?adr4 <- (has back  ?back1 ?back2 ?back3 ?w1 ?w2 ?w3 ?w4 ?w5 ?w6)
	?adr5 <- (has left  ?z1 ?z2 ?z3 ?z4 ?z5 ?z6 ?left1 ?left2 ?left3)
	?adr6 <- (has down ?d1 ?d2 ?d3 ?d4 ?d5 ?d6 ?d7 ?d8 ?d9)
	=>
	(retract ?adr1)
	(retract ?adr2)
	(retract ?adr3)
	(retract ?adr4)
	(retract ?adr5)
	(retract ?adr6)
	(assert (moves $?miscari))
	(assert (has right ?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?front1 ?front2 ?front3))
	(assert (has front ?y1 ?y2 ?y3 ?y4 ?y5 ?y6 ?left1 ?left2 ?left3))
	(assert (has back ?right1 ?right2 ?right3 ?w1 ?w2 ?w3 ?w4 ?w5 ?w6))
	(assert (has left ?z1 ?z2 ?z3 ?z4 ?z5 ?z6 ?back1  ?back2 ?back3))
	(assert (has down ?d7 ?d4 ?d1 ?d8 ?d5 ?d2 ?d9 ?d6 ?d3))	
 )
  (defrule miscare_F (declare (salience 50))
	?adr1 <- (moves F $?miscari)
	?adr2 <- (has right ?right1 ?x1 ?x2 ?right2 ?x3 ?x4 ?right3 ?x5 ?x6)
	?adr3 <- (has up ?y1 ?y2 ?y3 ?y4 ?y5 ?y6 ?up1 ?up2 ?up3)
	?adr4 <- (has left ?z1 ?z2 ?left1 ?z3 ?z4 ?left2 ?z5 ?z6 ?left3)
	?adr5 <- (has down ?down1 ?down2 ?down3 ?w1 ?w2 ?w3 ?w4 ?w5 ?w6 )
	?adr6 <- (has front ?f1 ?f2 ?f3 ?f4 ?f5 ?f6 ?f7 ?f8 ?f9)
	=>
	(retract ?adr1)
	(retract ?adr2)
	(retract ?adr3)
	(retract ?adr4)
	(retract ?adr5)
	(retract ?adr6)
	(assert (moves $?miscari))
	(assert (has right ?up1 ?x1 ?x2 ?up2 ?x3 ?x4 ?up3 ?x5 ?x6))
	(assert (has up  ?y1 ?y2 ?y3 ?y4 ?y5 ?y6 ?left3 ?left2 ?left1))
	(assert (has left ?z1 ?z2 ?down1 ?z3 ?z4 ?down2 ?z5 ?z6 ?down3))
	(assert (has down ?right3 ?right2 ?right1 ?w1 ?w2 ?w3 ?w4 ?w5 ?w6))
	(assert (has front ?f7 ?f4 ?f1 ?f8 ?f5 ?f2 ?f9 ?f6 ?f3))
 )
 
 (defrule miscare_R_prim (declare (salience 50))
	?adr1 <- (moves R' $?miscari)
	?adr2 <- (has down ?x1 ?x2 ?down1 ?x3 ?x4 ?down2 ?x5 ?x6 ?down3)
	?adr3 <- (has front ?y1 ?y2 ?front1 ?y3 ?y4 ?front2 ?y5 ?y6 ?front3)
	?adr4 <- (has up ?z1 ?z2 ?up1 ?z3 ?z4 ?up2 ?z5 ?z6 ?up3)
	?adr5 <- (has back ?back1 ?w1 ?w2 ?back2 ?w3 ?w4 ?back3 ?w5 ?w6)
	?adr6 <- (has right ?r1 ?r2 ?r3 ?r4 ?r5 ?r6 ?r7 ?r8 ?r9)
	=>
	(retract ?adr1)
	(retract ?adr2)
	(retract ?adr3)
	(retract ?adr4)
	(retract ?adr5)
	(retract ?adr6)
	(assert (moves $?miscari))
	(assert (has down ?x1 ?x2 ?front1 ?x3 ?x4 ?front2 ?x5 ?x6 ?front3))
	(assert (has front ?y1 ?y2 ?up1 ?y3 ?y4 ?up2 ?y5 ?y6 ?up3))
	(assert (has up ?z1 ?z2 ?back1 ?z3 ?z4 ?back2 ?z5 ?z6 ?back3))
	(assert (has back ?down1 ?w1 ?w2 ?down2 ?w3 ?w4 ?down3 ?w5 ?w6))
	(assert (has right ?r3 ?r6 ?r9 ?r2 ?r5 ?r8 ?r1 ?r4 ?r7))	
 )
 
 (defrule miscare_L_prim (declare (salience 50))
	?adr1 <- (moves L' $?miscari)
	?adr2 <- (has down ?down1 ?x1 ?x2 ?down2 ?x3 ?x4 ?down3 ?x5 ?x6)
	?adr3 <- (has front ?front1 ?y1 ?y2 ?front2 ?y3 ?y4 ?front3 ?y5 ?y6)
	?adr4 <- (has up ?up1 ?z1 ?z2 ?up2 ?z3 ?z4 ?up3 ?z5 ?z6)
	?adr5 <- (has back  ?w1 ?w2 ?back1 ?w3 ?w4 ?back2 ?w5 ?w6 ?back3)
	?adr6 <- (has left ?l1 ?l2 ?l3 ?l4 ?l5 ?l6 ?l7 ?l8 ?l9)
	=>
	(retract ?adr1)
	(retract ?adr2)
	(retract ?adr3)
	(retract ?adr4)
	(retract ?adr5)
	(retract ?adr6)
	(assert (moves $?miscari))
	(assert (has down ?back1 ?x1 ?x2 ?back2 ?x3 ?x4 ?back3 ?x5 ?x6))
	(assert (has front ?down1 ?y1 ?y2 ?down2 ?y3 ?y4 ?down3 ?y5 ?y6))
	(assert (has up ?front1 ?z1 ?z2 ?front2 ?z3 ?z4 ?front3 ?z5 ?z6))
	(assert (has back ?w1 ?w2 ?up1 ?w3 ?w4 ?up2 ?w5 ?w6 ?up3))
	(assert (has left ?l3 ?l6 ?l9 ?l2 ?l5 ?l8 ?l1 ?l4 ?l7))	
 )
 
 (defrule miscare_U_prim (declare (salience 50))
	?adr1 <- (moves U' $?miscari)
	?adr2 <- (has right ?right1 ?right2 ?right3 ?x1 ?x2 ?x3 ?x4 ?x5 ?x6)
	?adr3 <- (has front ?front1 ?front2 ?front3 ?y1 ?y2 ?y3 ?y4 ?y5 ?y6)
	?adr4 <- (has back ?w1 ?w2 ?w3 ?w4 ?w5 ?w6 ?back1  ?back2 ?back3)
	?adr5 <- (has left ?left1 ?left2 ?left3 ?z1 ?z2 ?z3 ?z4 ?z5 ?z6)
	?adr6 <- (has up ?u1 ?u2 ?u3 ?u4 ?u5 ?u6 ?u7 ?u8 ?u9)
	=>
	(retract ?adr1)
	(retract ?adr2)
	(retract ?adr3)
	(retract ?adr4)
	(retract ?adr5)
	(retract ?adr6)
	(assert (moves $?miscari))
	(assert (has right ?front1 ?front2 ?front3 ?x1 ?x2 ?x3 ?x4 ?x5 ?x6))
	(assert (has front ?left1 ?left2 ?left3 ?y1 ?y2 ?y3 ?y4 ?y5 ?y6))
	(assert (has back  ?w1 ?w2 ?w3 ?w4 ?w5 ?w6 ?right1 ?right2 ?right3))
	(assert (has left ?back1 ?back2 ?back3 ?z1 ?z2 ?z3 ?z4 ?z5 ?z6))
	(assert (has up ?u3 ?u6 ?u9 ?u2 ?u5 ?u8 ?u1 ?u4 ?u7))	
 )
 
 
 (defrule miscare_D_prim (declare (salience 50))
	?adr1 <- (moves D' $?miscari)
	?adr2 <- (has right ?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?right1 ?right2 ?right3 )
	?adr3 <- (has front ?y1 ?y2 ?y3 ?y4 ?y5 ?y6 ?front1 ?front2 ?front3)
	?adr4 <- (has back  ?back1 ?back2 ?back3 ?w1 ?w2 ?w3 ?w4 ?w5 ?w6)
	?adr5 <- (has left ?z1 ?z2 ?z3 ?z4 ?z5 ?z6 ?left1 ?left2 ?left3)
	?adr6 <- (has down ?d1 ?d2 ?d3 ?d4 ?d5 ?d6 ?d7 ?d8 ?d9)
	=>
	(retract ?adr1)
	(retract ?adr2)
	(retract ?adr3)
	(retract ?adr4)
	(retract ?adr5)
	(retract ?adr6)
	(assert (moves $?miscari))
	(assert (has right ?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?back1 ?back2 ?back3))
	(assert (has front ?y1 ?y2 ?y3 ?y4 ?y5 ?y6 ?right1 ?right2 ?right3))
	(assert (has back ?left1 ?left2 ?left3 ?w1 ?w2 ?w3 ?w4 ?w5 ?w6))
	(assert (has left ?z1 ?z2 ?z3 ?z4 ?z5 ?z6 ?front1 ?front2 ?front3))
	(assert (has down ?d3 ?d6 ?d9 ?d2 ?d5 ?d8 ?d1 ?d4 ?d7))	
 )
 
 (defrule miscare_F_prim (declare (salience 50))
	?adr1 <- (moves F' $?miscari)
	?adr2 <- (has right ?right1 ?x1 ?x2 ?right2 ?x3 ?x4 ?right3 ?x5 ?x6)
	?adr3 <- (has up ?y1 ?y2 ?y3 ?y4 ?y5 ?y6 ?up1 ?up2 ?up3)
	?adr4 <- (has left ?z1 ?z2 ?left1 ?z3 ?z4 ?left2 ?z5 ?z6 ?left3)
	?adr5 <- (has down ?down1 ?down2 ?down3 ?w1 ?w2 ?w3 ?w4 ?w5 ?w6)
	?adr6 <- (has front ?f1 ?f2 ?f3 ?f4 ?f5 ?f6 ?f7 ?f8 ?f9)
	=>
	(retract ?adr1)
	(retract ?adr2)
	(retract ?adr3)
	(retract ?adr4)
	(retract ?adr5)
	(retract ?adr6)
	(assert (moves $?miscari))
	(assert (has right ?down3 ?x1 ?x2 ?down2 ?x3 ?x4 ?down1 ?x5 ?x6))
	(assert (has up  ?y1 ?y2 ?y3 ?y4 ?y5 ?y6 ?right1 ?right2 ?right3))
	(assert (has left ?z1 ?z2 ?up3 ?z3 ?z4 ?up2 ?z5 ?z6 ?up1))
	(assert (has down ?left1 ?left2 ?left3 ?w1 ?w2 ?w3 ?w4 ?w5 ?w6))
	(assert (has front ?f3 ?f6 ?f9 ?f2 ?f5 ?f8 ?f1 ?f4 ?f7))	
 )
 
 (defrule miscare_B (declare (salience 50))
	?adr1 <- (moves B $?miscari)
	?adr2 <- (has right ?x1 ?x2 ?right1 ?x3 ?x4 ?right2 ?x5 ?x6 ?right3 )
	?adr3 <- (has down ?y1 ?y2 ?y3 ?y4 ?y5 ?y6 ?down1 ?down2 ?down3)
	?adr4 <- (has up ?up1 ?up2 ?up3 ?z1 ?z2 ?z3 ?z4 ?z5 ?z6)
	?adr5 <- (has left ?left1 ?w1 ?w2 ?left2 ?w3 ?w4 ?left3 ?w5 ?w6)
    ?adr6 <- (has back ?b1 ?b2 ?b3 ?b4 ?b5 ?b6 ?b7 ?b8 ?b9)
	=>
	(retract ?adr1)
	(retract ?adr2)
	(retract ?adr3)
	(retract ?adr4)
	(retract ?adr5)
	(retract ?adr6)
	(assert (moves $?miscari))
	(assert (has right ?x1 ?x2 ?down3 ?x3 ?x4 ?down2 ?x5 ?x6 ?down1))
	(assert (has down ?y1 ?y2 ?y3 ?y4 ?y5 ?y6 ?left1 ?left2 ?left3))
	(assert (has up ?right1 ?right2 ?right3 ?z1 ?z2 ?z3 ?z4 ?z5 ?z6))
	(assert (has left ?up3 ?w1 ?w2 ?up2 ?w3 ?w4 ?up1 ?w5 ?w6))
	(assert (has back ?b3 ?b6 ?b9 ?b2 ?b5 ?b8 ?b1 ?b4 ?b7))	
 )
 
(defrule miscare_B_prim (declare (salience 50))
	?adr1 <- (moves B' $?miscari)
	?adr2 <- (has right ?x1 ?x2 ?right1 ?x3 ?x4 ?right2 ?x5 ?x6 ?right3)
	?adr3 <- (has down ?y1 ?y2 ?y3 ?y4 ?y5 ?y6 ?down1 ?down2 ?down3)
	?adr4 <- (has up ?up1 ?up2 ?up3 ?z1 ?z2 ?z3 ?z4 ?z5 ?z6)
	?adr5 <- (has left ?left1 ?w1 ?w2 ?left2 ?w3 ?w4 ?left3 ?w5 ?w6)
    ?adr6 <- (has back ?b1 ?b2 ?b3 ?b4 ?b5 ?b6 ?b7 ?b8 ?b9)
	=>
	(retract ?adr1)
	(retract ?adr2)
	(retract ?adr3)
	(retract ?adr4)
	(retract ?adr5)
	(retract ?adr6)
	(assert (moves $?miscari))
	(assert (has right ?x1 ?x2 ?up1 ?x3 ?x4 ?up2 ?x5 ?x6 ?up3))
	(assert (has down ?y1 ?y2 ?y3 ?y4 ?y5 ?y6 ?right3 ?right2 ?right1))
	(assert (has up ?left3 ?left2 ?left1 ?z1 ?z2 ?z3 ?z4 ?z5 ?z6))
	(assert (has left ?down1 ?w1 ?w2 ?down2 ?w3 ?w4 ?down3 ?w5 ?w6))
	(assert (has back ?b7 ?b4 ?b1 ?b8 ?b5 ?b2 ?b9 ?b6 ?b3))	
 )